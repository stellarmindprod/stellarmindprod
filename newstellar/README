StellarMind Prod (Flask Version)

This is the Flask-based backend conversion of the StellarMind project.

Project Structure

stellarminprod/
├── app.py              # Main Flask application logic
├── config.py           # Configuration (Supabase keys, table names)
├── requirements.txt    # Python package dependencies
├── templates/          # HTML templates
│   ├── layout.html         # Base HTML structure
│   ├── login.html          # Login page (CSS embedded)
│   ├── student_dashboard.html # Student view (CSS embedded)
│   ├── teacher_dashboard.html # Teacher view (CSS embedded)
│   ├── admin_dashboard.html   # Admin view (CSS embedded)
│   ├── signup.html         # Signup page (Placeholder, CSS embedded)
│   ├── forgot_password.html # Forgot Pwd page (Placeholder, CSS embedded)
│   ├── 404.html            # Custom 404 error page (CSS embedded)
│   └── 500.html            # Custom 500 error page (CSS embedded)
├── static/             # Static files (Images only)
│   └── images/             # Place logo.png here
│       └── logo.png
└── database_notes.md   # Important notes about DB setup
└── README.md           # Project README (This file)


Setup

Create Virtual Environment:

python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate


Install Dependencies:

pip install -r requirements.txt


Configure:

Update config.py with your NEW Supabase Project URL, Anon Key, and Service Role Key.

CRITICAL: Change the SECRET_KEY in config.py to a strong, unique random string. You can generate one using python -c 'import secrets; print(secrets.token_hex(24))'.

Ensure your NEW Supabase database has the tables defined in your SQL schema (b1...b4, teachers, courses, grades, backlogs, marks1...marks4).

Create the admins, attendance, events, and holidays tables in your new Supabase database based on the database_notes.md file and your old project's needs.

Place your application logo (e.g., logo.png) inside the stellarminprod/static/images/ directory. Create the static and images directories if they don't exist.

Password Hashing (IMPORTANT):

The current app.py checks against plain text passwords, which is insecure.

You MUST modify your Supabase tables (b1...b4, teachers, admins) to store hashed passwords.

Use a Python script with from werkzeug.security import generate_password_hash to hash existing passwords and update the database before running the Flask app for login. See database_notes.md for more details.

Once the database stores hashed passwords, modify the fetch_and_verify_user function in app.py to use check_password_hash(...) instead of the plain text comparison (== password).

Run the Flask Development Server:

flask run
# Or, if that doesn't work:
# python app.py


Access the application at http://127.0.0.1:5000.

Deployment

For production, use a proper WSGI server like Gunicorn or Waitress. Do NOT use the Flask development server in production.

# Example using Gunicorn
gunicorn -w 4 app:app


Remember to set debug=False in app.py for production. Manage SECRET_KEY and Supabase keys securely using environment variables or a configuration management tool.

Next Steps

Implement the backend logic for Signup (/signup route in app.py), Email Verification (potentially using Supabase Auth or an external service), and Password Reset (/forgot-password route).

Flesh out the dashboard templates (teacher_dashboard.html, admin_dashboard.html) with actual data fetching and functionality (e.g., create routes and templates for attendance marking, marks entry pages referenced in the dashboards).

Add any required JavaScript interactions within <script> tags in the relevant templates.

Securely implement password hashing in your database and update app.py's verification logic.