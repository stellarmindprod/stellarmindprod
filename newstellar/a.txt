-- ----------------------------------------------------------------------
-- Student Information Tables (b1, b2, b3, b4)
-- Attributes for b1, b2, b3, b4 are: roll no., name, email, password, parent's email, parent's password
-- Note: 'roll no.' is the primary key in a real-world student table, here we use a separate 'id' for auto-increment.
-- ----------------------------------------------------------------------

CREATE TABLE b1 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    roll_no TEXT UNIQUE NOT NULL, -- Corresponds to 'roll no.' (b1 in diagram)
    student_name TEXT NOT NULL,
    student_email TEXT UNIQUE NOT NULL,
    student_password TEXT NOT NULL,
    parent_email TEXT UNIQUE,
    parent_password TEXT
);

CREATE TABLE b2 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    roll_no TEXT UNIQUE NOT NULL, -- Corresponds to 'roll no.'
    student_name TEXT NOT NULL,
    student_email TEXT UNIQUE NOT NULL,
    student_password TEXT NOT NULL,
    parent_email TEXT UNIQUE,
    parent_password TEXT
);

CREATE TABLE b3 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    roll_no TEXT UNIQUE NOT NULL, -- Corresponds to 'roll no.'
    student_name TEXT NOT NULL,
    student_email TEXT UNIQUE NOT NULL,
    student_password TEXT NOT NULL,
    parent_email TEXT UNIQUE,
    parent_password TEXT
);

CREATE TABLE b4 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    roll_no TEXT UNIQUE NOT NULL, -- Corresponds to 'roll no.'
    student_name TEXT NOT NULL,
    student_email TEXT UNIQUE NOT NULL,
    student_password TEXT NOT NULL,
    parent_email TEXT UNIQUE,
    parent_password TEXT
);

---
-- ----------------------------------------------------------------------
-- Course and Grades Tables
-- ----------------------------------------------------------------------

CREATE TABLE courses (
    course_code TEXT PRIMARY KEY,
    course_name TEXT NOT NULL,
    assisting_teacher TEXT,
    credits INTEGER NOT NULL,
    semester INTEGER NOT NULL
);

CREATE TABLE grades (
    roll_no TEXT PRIMARY KEY, -- Using roll_no as the primary key here, linking to student data
    total_credits_sem1 INTEGER, 
    total_credits_sem2 INTEGER,
    total_credits_sem3 INTEGER,
    total_credits_sem4 INTEGER,
    total_credits_sem5 INTEGER,
    total_credits_sem6 INTEGER,
    total_credits_sem7 INTEGER,
    total_credits_sem8 INTEGER,
    sgpa_sem1 NUMERIC(4, 2),
    sgpa_sem2 NUMERIC(4, 2),
    sgpa_sem3 NUMERIC(4, 2),
    sgpa_sem4 NUMERIC(4, 2),
    sgpa_sem5 NUMERIC(4, 2),
    sgpa_sem6 NUMERIC(4, 2),
    sgpa_sem7 NUMERIC(4, 2),
    sgpa_sem8 NUMERIC(4, 2),
    cgpa NUMERIC(4, 2)
);

CREATE TABLE backlogs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL, 
    subject_code TEXT NOT NULL,
    semester INTEGER NOT NULL
);

CREATE TABLE teachers (
    teacher_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    teacher_name TEXT NOT NULL,
    department TEXT,
    teacher_password TEXT NOT NULL,
    teacher_email TEXT UNIQUE NOT NULL
);

---
-- ----------------------------------------------------------------------
-- Marks Tables (marks1, marks2, marks3, marks4)
-- Attributes for Marks1, Marks2, Marks3, Marks4 are: roll no., subject code, credits, mid1, mid2, endsem, grades, internal
-- ----------------------------------------------------------------------

CREATE TABLE marks1 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL, -- Corresponds to 'roll no.'
    subject_code TEXT NOT NULL,
    credits INTEGER,
    mid1 INTEGER,
    mid2 INTEGER,
    endsem INTEGER,
    final_grade TEXT,
    internal_marks INTEGER
);

CREATE TABLE marks2 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL,
    subject_code TEXT NOT NULL,
    credits INTEGER,
    mid1 INTEGER,
    mid2 INTEGER,
    endsem INTEGER,
    final_grade TEXT,
    internal_marks INTEGER
);

CREATE TABLE marks3 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL,
    subject_code TEXT NOT NULL,
    credits INTEGER,
    mid1 INTEGER,
    mid2 INTEGER,
    endsem INTEGER,
    final_grade TEXT,
    internal_marks INTEGER
);

CREATE TABLE marks4 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL,
    subject_code TEXT NOT NULL,
    credits INTEGER,
    mid1 INTEGER,
    mid2 INTEGER,
    endsem INTEGER,
    final_grade TEXT,
    internal_marks INTEGER
);





-- SQL for batch-specific attendance tables
-- Run this in your Supabase SQL editor to create the new tables.

CREATE TABLE attendance1 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL, -- Should match roll_no in b1
    subject_code TEXT NOT NULL,
    subject_name TEXT,
    date DATE NOT NULL,
    status INTEGER NOT NULL DEFAULT 0,       -- classes attended
    total_classes INTEGER NOT NULL DEFAULT 1,-- total classes held
    created_at TIMESTAMPTZ DEFAULT now(),
    -- Foreign key to b1
    CONSTRAINT fk_student_b1 FOREIGN KEY (roll_no) REFERENCES b1 (roll_no) ON DELETE CASCADE
);
-- Index for faster lookups
CREATE INDEX idx_attendance1_roll_no_date ON attendance1 (roll_no, date);

CREATE TABLE attendance2 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL, -- Should match roll_no in b2
    subject_code TEXT NOT NULL,
    subject_name TEXT,
    date DATE NOT NULL,
    status INTEGER NOT NULL DEFAULT 0,
    total_classes INTEGER NOT NULL DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT fk_student_b2 FOREIGN KEY (roll_no) REFERENCES b2 (roll_no) ON DELETE CASCADE
);
CREATE INDEX idx_attendance2_roll_no_date ON attendance2 (roll_no, date);

CREATE TABLE attendance3 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL, -- Should match roll_no in b3
    subject_code TEXT NOT NULL,
    subject_name TEXT,
    date DATE NOT NULL,
    status INTEGER NOT NULL DEFAULT 0,
    total_classes INTEGER NOT NULL DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT fk_student_b3 FOREIGN KEY (roll_no) REFERENCES b3 (roll_no) ON DELETE CASCADE
);
CREATE INDEX idx_attendance3_roll_no_date ON attendance3 (roll_no, date);

CREATE TABLE attendance4 (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    roll_no TEXT NOT NULL, -- Should match roll_no in b4
    subject_code TEXT NOT NULL,
    subject_name TEXT,
    date DATE NOT NULL,
    status INTEGER NOT NULL DEFAULT 0,
    total_classes INTEGER NOT NULL DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT fk_student_b4 FOREIGN KEY (roll_no) REFERENCES b4 (roll_no) ON DELETE CASCADE
);
CREATE INDEX idx_attendance4_roll_no_date ON attendance4 (roll_no, date);


ALTER TABLE marks1
ADD CONSTRAINT marks1_roll_no_subject_code_key UNIQUE (roll_no, subject_code);

ALTER TABLE marks2
ADD CONSTRAINT marks2_roll_no_subject_code_key UNIQUE (roll_no, subject_code);

ALTER TABLE marks3
ADD CONSTRAINT marks3_roll_no_subject_code_key UNIQUE (roll_no, subject_code);

ALTER TABLE marks4
ADD CONSTRAINT marks4_roll_no_subject_code_key UNIQUE (roll_no, subject_code);


-- This SQL file updates your marks tables to allow decimal values for marks.
-- Run these commands in your Supabase SQL Editor.

-- Use NUMERIC(5, 2) to allow numbers like 123.45 (5 total digits, 2 after the decimal).
-- You can adjust this precision if needed (e.g., NUMERIC(4, 1) for 999.9).

-- Alter marks1 table
ALTER TABLE marks1
ALTER COLUMN mid1 TYPE NUMERIC(5, 2),
ALTER COLUMN mid2 TYPE NUMERIC(5, 2),
ALTER COLUMN endsem TYPE NUMERIC(5, 2),
ALTER COLUMN internal_marks TYPE NUMERIC(5, 2);

-- Alter marks2 table
ALTER TABLE marks2
ALTER COLUMN mid1 TYPE NUMERIC(5, 2),
ALTER COLUMN mid2 TYPE NUMERIC(5, 2),
ALTER COLUMN endsem TYPE NUMERIC(5, 2),
ALTER COLUMN internal_marks TYPE NUMERIC(5, 2);

-- Alter marks3 table
ALTER TABLE marks3
ALTER COLUMN mid1 TYPE NUMERIC(5, 2),
ALTER COLUMN mid2 TYPE NUMERIC(5, 2),
ALTER COLUMN endsem TYPE NUMERIC(5, 2),
ALTER COLUMN internal_marks TYPE NUMERIC(5, 2);

-- Alter marks4 table
ALTER TABLE marks4
ALTER COLUMN mid1 TYPE NUMERIC(5, 2),
ALTER COLUMN mid2 TYPE NUMERIC(5, 2),
ALTER COLUMN endsem TYPE NUMERIC(5, 2),
ALTER COLUMN internal_marks TYPE NUMERIC(5, 2);


CREATE TABLE admin (
    username VARCHAR(100) PRIMARY KEY,
    password TEXT NOT NULL,
    name VARCHAR(255),
    email VARCHAR(255) UNIQUE
);


CREATE TABLE timetables (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    semester INTEGER NOT NULL,
    day_of_week TEXT NOT NULL, -- e.g., 'MON', 'TUE'
    start_time TEXT NOT NULL,  -- e.g., '09:30'
    end_time TEXT NOT NULL,    -- e.g., '10:30'
    subject_code TEXT,         -- Foreign key to courses table
    venue TEXT,                -- e.g., 'Shed III', 'CL-4'
    
    created_at TIMESTAMPTZ DEFAULT now(),
    
    -- Links to the courses table. If a course is deleted, this entry's subject is set to NULL.
    CONSTRAINT fk_subject_code
        FOREIGN KEY (subject_code) 
        REFERENCES courses (course_code)
        ON DELETE SET NULL
);

-- Add an index for faster lookups by semester and day
CREATE INDEX idx_timetable_semester_day ON timetables (semester, day_of_week);


-- This script adds a 'parent_phone_number' column to all student tables.
-- You can run this in your Supabase SQL editor.

-- Add parent_phone_number column to b1
ALTER TABLE b1
ADD COLUMN parent_phone_number TEXT;

-- Add parent_phone_number column to b2
ALTER TABLE b2
ADD COLUMN parent_phone_number TEXT;

-- Add parent_phone_number column to b3
ALTER TABLE b3
ADD COLUMN parent_phone_number TEXT;

-- Add parent_phone_number column to b4
ALTER TABLE b4
ADD COLUMN parent_phone_number TEXT;
